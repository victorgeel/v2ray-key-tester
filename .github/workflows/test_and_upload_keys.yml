# .github/workflows/test_and_upload_keys.yml
name: Test V2Ray Keys and Upload to R2 & GitHub

on:
  # schedule:
  #   - cron: '*/15 * * * *' # Runs every 15 minutes
  #   - cron: '0 * * * *' # Runs at the start of every hour (example)
  workflow_dispatch: # Allows manual triggering from GitHub Actions tab

jobs:
  test-and-upload:
    runs-on: ubuntu-latest # Use a standard Ubuntu runner

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }} # Ensure this secret is set in repo settings.
          persist-credentials: false
          fetch-depth: 0 # Fetch all history to check for changes before committing

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use a recent Python 3 version (e.g., '3.10', '3.11', '3.12')

      # 3. Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Download and Setup V2Ray/Xray Binary
      # Choose ONE of the following binary download steps (either Xray or V2Ray)

      - name: Download and Setup Xray Binary
        id: setup_binary # Give this step an ID to reference later
        run: |
          XRAY_VERSION="1.8.7" # <<--- Use a specific Xray version
          ASSET_NAME="Xray-linux-64.zip"
          DOWNLOAD_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/${ASSET_NAME}"
          DEST_DIR="./xray-binary" # Directory to extract binary
          BINARY_PATH="${DEST_DIR}/xray" # Expected path after extraction

          echo "Downloading Xray from ${DOWNLOAD_URL}"
          curl -L ${DOWNLOAD_URL} -o xray.zip
          mkdir -p ${DEST_DIR} # Create destination directory
          unzip -o xray.zip -d ${DEST_DIR} # Unzip, -o means overwrite if exists

          # Check if binary exists after extraction
          if [ ! -f "${BINARY_PATH}" ]; then
            echo "Error: Xray binary not found at ${BINARY_PATH} after extraction."
            exit 1 # Fail the job if binary is missing
          fi

          chmod +x ${BINARY_PATH} # Make it executable

          # Set the binary path as an environment variable for the Python script and subsequent steps
          echo "V2RAY_BINARY_PATH=${BINARY_PATH}" >> $GITHUB_ENV

          echo "Xray binary setup complete."
          ${BINARY_PATH} version # Print version to confirm


      # - name: Download and Setup V2Ray Binary # <--- Alternative: Download V2Ray
      #   id: setup_binary # Use the same ID if you switch
      #   run: |
      #     V2RAY_VERSION="5.14.1" # <<--- Use a specific V2Ray version
      #     ASSET_NAME="v2ray-linux-64.zip"
      #     DOWNLOAD_URL="https://github.com/v2ray/v2ray-core/releases/download/v${V2RAY_VERSION}/${ASSET_NAME}"
      #     DEST_DIR="./v2ray-binary"
      #     BINARY_PATH="${DEST_DIR}/v2ray"

      #     echo "Downloading V2Ray from ${DOWNLOAD_URL}"
      #     curl -L ${DOWNLOAD_URL} -o v2ray.zip
      #     mkdir -p ${DEST_DIR}
      #     unzip -o v2ray.zip -d ${DEST_DIR}

      #     if [ ! -f "${BINARY_PATH}" ]; then
      #       echo "Error: V2Ray binary not found at ${BINARY_PATH} after extraction."
      #       exit 1
      #     fi

      #     chmod +x ${BINARY_PATH}
      #     echo "V2RAY_BINARY_PATH=${BINARY_PATH}" >> $GITHUB_ENV
      #     echo "V2Ray binary setup complete."
      #     ${BINARY_PATH} version


      # 5. Run V2Ray Key Tester Script
      - name: Run V2Ray Key Tester Script
        # This step depends on the binary setup step
        needs: setup_binary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Pass the subscription URLs secret as an environment variable
          SUBSCRIPTION_URLS: ${{ secrets.SUBSCRIPTION_URLS }}
          # V2RAY_BINARY_PATH is already set in the previous step via $GITHUB_ENV
        run: |
          # Check if the binary path was set by the previous step
          if [ -z "${{ env.V2RAY_BINARY_PATH }}" ]; then
             echo "Error: V2RAY_BINARY_PATH environment variable is not set."
             echo "This indicates the binary download step failed."
             exit 1
          fi

          echo "Using V2Ray/Xray binary: ${{ env.V2RAY_BINARY_PATH }}"

          # Ensure output directory exists before the script runs
          # Get OUTPUT_DIR from python script and create it
          # We will set this as an env var in the NEXT step
          OUTPUT_DIR_FROM_SCRIPT=$(python -c "import test_v2ray_keys; print(test_v2ray_keys.OUTPUT_DIR)")
          mkdir -p ${OUTPUT_DIR_FROM_SCRIPT}
          echo "Output directory from script: ${OUTPUT_DIR_FROM_SCRIPT}" # Log the directory

          # Run the Python script
          # The script will create working_subscription.txt and clash_config.yaml inside the output directory
          python test_v2ray_keys.py

          echo "Testing Complete. Output files generated in ${OUTPUT_DIR_FROM_SCRIPT}."

          # Check if the primary output file (working_subscription.txt) was created and is not empty
          WORKING_KEYS_FILE_FULL_PATH=${OUTPUT_DIR_FROM_SCRIPT}/working_subscription.txt # Construct full path
          if [ -s "${WORKING_KEYS_FILE_FULL_PATH}" ]; then
            echo "Found working keys."
          else
            echo "No working keys found or file ${WORKING_KEYS_FILE_FULL_PATH} is empty."
            # Optionally exit with a non-zero code here if finding working keys is mandatory
            # exit 1
          fi


      # --- NEW STEP: Set Output Directory as Environment Variable ---
      # This step captures the OUTPUT_DIR value from the Python script
      # and sets it as an environment variable for subsequent steps.
      - name: Set Output Directory Env Var
        needs: test-and-upload # Depends on the previous step
        run: |
          # Get the OUTPUT_DIR path again from the Python script
          OUTPUT_DIR_FROM_SCRIPT=$(python -c "import test_v2ray_keys; print(test_v2ray_keys.OUTPUT_DIR)")
          # Set it as an environment variable for subsequent steps
          echo "OUTPUT_DIR_PYTHON=${OUTPUT_DIR_FROM_SCRIPT}" >> $GITHUB_ENV
          echo "Set OUTPUT_DIR_PYTHON env var to: ${{ env.OUTPUT_DIR_PYTHON }}"


      # 6. Commit and Push Subscription Files to Repo
      - name: Commit and Push Subscription Files to Repo
        # Depends on the 'Set Output Directory Env Var' step
        needs: Set-Output-Directory-Env-Var
        # Use a condition to skip if no changes
        env:
          # OUTPUT_DIR_PYTHON is now available from the environment
          OUTPUT_DIR_PYTHON: ${{ env.OUTPUT_DIR_PYTHON }}

        run: |
          # Check if the output directory exists using the env var
          if [ -z "${{ env.OUTPUT_DIR_PYTHON }}" ] || [ ! -d "${{ env.OUTPUT_DIR_PYTHON }}" ]; then
            echo "Output directory '${{ env.OUTPUT_DIR_PYTHON }}' not found or variable not set. Skipping Git commit."
            exit 0 # Exit this step gracefully
          fi

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Add all files in the output directory
          # Use the environment variable for the directory path
          git add "${{ env.OUTPUT_DIR_PYTHON }}"/*

          # Check if there are any staged changes before committing
          if git diff --cached --quiet; then
            echo "No changes detected in '${{ env.OUTPUT_DIR_PYTHON }}/'. Skipping commit."
          else
            # Commit changes
            git commit -m "Update subscription files and clash config [skip ci]"
            echo "Changes committed."

            # Push changes
            git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
            git push origin HEAD:${{ github.ref_name }} # Push to the current branch
            echo "Changes pushed to repository."
          fi


      # 7. Install rclone
      - name: Install rclone
        # Depends on the 'Set Output Directory Env Var' step
        needs: Set-Output-Directory-Env-Var # Or needs: test-and-upload depending on dependency chain

        run: |
          sudo apt-get update && sudo apt-get install -y rclone

      # 8. Configure rclone for Cloudflare R2
      - name: Configure rclone for Cloudflare R2
        # Depends on the 'Set Output Directory Env Var' step and rclone install
        needs: [Set-Output-Directory-Env-Var, install-rclone] # Add install-rclone job/step name if separate

        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }} # e.g. https://<ACCOUNT_ID>.r2.cloudflarestorage.com
        run: |
          # Create rclone config file in runner's home directory
          mkdir -p ~/.config/rclone
          cat << EOF > ~/.config/rclone/rclone.conf
          [R2]
          type = s3
          provider = Cloudflare
          access_key_id = ${R2_ACCESS_KEY_ID}
          secret_access_key = ${R2_SECRET_ACCESS_KEY}
          endpoint = ${R2_ENDPOINT}
          acl = public-read
          # Optional: server_side_encryption = AES256
          EOF
          echo "Rclone config created."
          # rclone listremotes # List remotes to verify config (optional)


      # 9. Sync working key files and Clash config to R2 Bucket
      - name: Sync files to R2 Bucket
        # Depends on R2 config and Output Directory Env Var
        needs: [configure-rclone, Set-Output-Directory-Env-Var]

        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          # OUTPUT_DIR_PYTHON is now available from the environment
          OUTPUT_DIR_PYTHON: ${{ env.OUTPUT_DIR_PYTHON }}

        run: |
          # Check if the output directory exists using the env var
          if [ -z "${{ env.OUTPUT_DIR_PYTHON }}" ] || [ ! -d "${{ env.OUTPUT_DIR_PYTHON }}" ]; then
            echo "Output directory '${{ env.OUTPUT_DIR_PYTHON }}' not found or variable not set. Skipping R2 sync."
            exit 0 # Exit this step gracefully
          fi

          echo "Syncing contents of ${{ env.OUTPUT_DIR_PYTHON }} to R2:${R2_BUCKET_NAME}/"
          # Use sync to make the R2 bucket directory mirror the local output directory
          rclone sync "${{ env.OUTPUT_DIR_PYTHON }}" "R2:${R2_BUCKET_NAME}/" \
            --progress --verbose \
            --retries 3 --low-level-retries 5 --stats 1m \
            > rclone_sync_log.txt 2>&1 || true # Log output, allow failure with || true if you don't want sync errors to fail the job

          echo "Rclone sync command finished."

      # 10. Upload Rclone Sync Log (Optional)
      - name: Upload Rclone Sync Log
        uses: actions/upload-artifact@v4.6.2
        with:
          name: rclone-sync-log-${{ github.run_id }}
          path: rclone_sync_log.txt
          if-no-files-found: ignore

      # 11. Clean up output directory
      # Use 'always()' to ensure this step runs even if previous steps fail
      - name: Clean up output directory
        if: always()
        env:
           # OUTPUT_DIR_PYTHON is now available from the environment (if Set Output Directory Env Var step ran)
           OUTPUT_DIR_PYTHON: ${{ env.OUTPUT_DIR_PYTHON }}
        run: |
          # Check if the env var is set and the directory exists before cleaning
          if [ -n "${{ env.OUTPUT_DIR_PYTHON }}" ] && [ -d "${{ env.OUTPUT_DIR_PYTHON }}" ]; then
            echo "Cleaning up directory ${{ env.OUTPUT_DIR_PYTHON }}"
            rm -rf "${{ env.OUTPUT_DIR_PYTHON }}"
          else
             echo "Output directory variable not set or directory not found. Skipping cleanup."
          fi

          # Also clean up binary directory (assuming they are in known locations relative to workspace root)
          if [ -d "./xray-binary" ]; then echo "Cleaning up ./xray-binary"; rm -rf ./xray-binary; fi
          if [ -d "./v2ray-binary" ]; then echo "Cleaning up ./v2ray-binary"; rm -rf ./v2ray-binary; fi

