# Workflow နာမည်
name: Test V2Ray Keys and Upload to R2 & GitHub

on:
  schedule:
    # နာရီတိုင်း run မယ် (လိုအပ်သလို ပြင်ပါ)
    # Example: runs at minute 0 past every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Manually run ခွင့်ပြုရန်

jobs:
  test-and-upload:
    runs-on: ubuntu-latest # Linux runner ကို သုံးမည်
    steps:
      # 1. Repository code ကို checkout လုပ်မည် (PAT ကို အသုံးပြုရန်)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }} # Repository ကို ပြန် push လုပ်ဖို့ PAT ကိုသုံးမည်
          persist-credentials: false # Credential conflict ရှောင်ရန်

      # 2. Python ကို setup လုပ်မည်
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Python version (လိုအပ်လျှင် ပြင်ပါ)

      # 3. Python dependencies တွေကို requirements.txt ကနေ install လုပ်မည်
      - name: Install Python dependencies
        run: pip install -r requirements.txt

      # 4. V2Ray Key Tester Python script ကို run မည်
      - name: Run V2Ray Key Tester Script
        env:
          # Default GITHUB_TOKEN ကိုသုံးနိုင်သည် (ဥပမာ - Xray download အတွက်)
          # Script က private repo access မလို၊ API ခေါ်တာမျိုး မဟုတ်ရင် ဒါအဆင်ပြေသည်
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Python script က OUTPUT_DIR = "subscription" လို့ သတ်မှတ်ထားရန်လို
        run: python test_v2ray_keys.py

      # 5. Subscription ဖိုင်တွေကို GitHub Repo ကို Commit & Push လုပ်မည် (PAT ကို သုံးရန် ပြင်ဆင်ထားသည်)
      - name: Commit and Push Subscription Files to Repo
        run: |
          SUB_DIR="subscription" # Python script ထဲက OUTPUT_DIR နဲ့ တူရမည်
          if [ ! -d "${SUB_DIR}" ]; then
            echo "Directory '${SUB_DIR}' not found. Skipping Git commit."
          else
            echo "Configuring Git user..."
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            echo "Adding files from '${SUB_DIR}' to staging area..."
            # subscription directory ထဲက ဖိုင်အားလုံးကို stage လုပ်ပါ
            git add ${SUB_DIR}/*

            # Commit လုပ်စရာ အပြောင်းအလဲ ရှိမရှိ စစ်ဆေးပါ
            echo "Checking for staged changes..."
            if git diff --staged --quiet; then
              echo "No changes detected in '${SUB_DIR}' directory to commit."
            else
              echo "Changes detected in '${SUB_DIR}'. Committing..."
              # Commit message မှာ [skip ci] ပါအောင် ထည့်ပါ (workflow ထပ်မ run စေရန်)
              git commit -m "Update subscription files in ${SUB_DIR} [skip ci]"

              echo "Setting remote URL with PAT for push..."
              # PAT ကို အသုံးပြု၍ push လုပ်ရန် remote URL ကို သတ်မှတ်ပါ
              git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}

              echo "Pushing changes to origin..."
              # လက်ရှိ branch ကို push လုပ်ပါ
              git push origin HEAD:${{ github.ref_name }}
              echo "Push completed successfully."
            fi
          fi
        # env block ကို ဤနေရာတွင် မလိုအပ်တော့ပါ (push command ထဲမှာ token သုံးထားပြီး)

      # 6. rclone ကို install လုပ်မည် (R2 အတွက်)
      - name: Install rclone
        run: |
          sudo apt-get update && sudo apt-get install -y rclone

      # 7. rclone ကို Cloudflare R2 အတွက် configure လုပ်မည်
      - name: Configure rclone for Cloudflare R2
        env:
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          rclone config create R2 s3 \
            provider=Cloudflare \
            access_key_id=$R2_ACCESS_KEY_ID \
            secret_access_key=$R2_SECRET_ACCESS_KEY \
            endpoint=$R2_ENDPOINT \
            acl=public-read # Optional: Bot က public file ဖတ်ရန် လိုအပ်လျှင် ထားခဲ့ပါ

      # 8. Working key ဖိုင်တွေကို R2 Bucket ကို Sync လုပ်မည်
      - name: Sync working key files to R2 Bucket
        env:
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        run: |
          # Python script က ထုတ်ပေးတဲ့ မှန်ကန်တဲ့ directory ကို sync လုပ်ပါ
          SYNC_DIR="subscription" # Python script ထဲက OUTPUT_DIR နဲ့ တူရမည်
          if [ -d "./${SYNC_DIR}" ]; then
            echo "Output directory '${SYNC_DIR}' found. Syncing to R2 bucket root..."
            # R2 Bucket ရဲ့ root ကို sync လုပ်ပါမယ်
            rclone sync ./${SYNC_DIR} R2:${R2_BUCKET_NAME}/ --progress --verbose
          else
            echo "Output directory '${SYNC_DIR}' not found. Skipping R2 sync."
          fi

      # 9. Output directory ကို ရှင်းလင်းမည် (Optional)
      - name: Clean up output directory (optional)
        run: |
          CLEANUP_DIR="subscription" # Python script ထဲက OUTPUT_DIR နဲ့ တူရမည်
          if [ -d "./${CLEANUP_DIR}" ]; then
            echo "Removing directory ${CLEANUP_DIR}..."
            rm -rf ./${CLEANUP_DIR}
          fi

